---
title: Fast and differentiable likelihoods with Blast.jl
subtitle: Based on S. Chiarenza, **M. B. **, W. Percival, M. White, 2024
from: markdown+emoji
format:
    clean-revealjs:
        footer: "Fast and differentiable likelihoods with Blast.jl"
        logo: "https://res.cloudinary.com/df9pocq2o/image/upload/v1747889986/Waterloo_Science_Logo_horiz_rgb_iliu71.png"
        include-in-header:
            - text: |
                <style>
                    /* shrink all slide text to 85% of the default */
                    .reveal .slides {
                    font-size: 0.80em !important;
                    }

                    }

                    .reveal .footer {
                    font-size: 0.8em !important;
                    }

                    /* if you want to tweak headings independently */
                    .reveal h1 { font-size: 1.6em !important; }
                    .reveal h2 { font-size: 1.3em !important; }

                    /* your existing logo rule */
                    .reveal .slide-logo {
                    max-height: 2.0em !important;
                    }
                </style>
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Marco Bonici
    orcid: 0000-0002-8430-126X
    email: marco.bonici@uwaterloo.ca
    affiliations: Waterloo Centre for Astrophysics
date: last-modified
institute: "$3 \\times 2\\,\\mathrm{pt}$ meeting, Paris"
---

## A challenging computation

$$
C_{i j}^{\mathrm{AB}}(\ell)= \iint \mathrm{d}\chi_1 \mathrm{d} \chi_2 W_i^{\mathrm{A}}\left(\chi_1\right) W_j^{\mathrm{B}}\left(\chi_2\right) \int \mathrm{d} k\, k^2 P^{\mathrm{AB}}\left(k, \chi_1, \chi_2\right) \frac{j_\ell\left(k \chi_1\right) j_{\ell}\left(k \chi_2\right)}{\left(k \chi_1\right)^\alpha\left(k \chi_2\right)^\beta}
$$

:::: {.columns}
::: {.column width="50%"}
Approximations:

- Limber Approximation [Limber, 1953](https://ui.adsabs.harvard.edu/abs/1953ApJ...117..134L/abstract)
- Second Order Limber [Loverde & Ashfordi, 2008](https://arxiv.org/abs/0809.5112)
- Pecard-Lefshetz [Feldbrugge, 2023](https://arxiv.org/abs/2304.13064)
- Flat-sky [Gao et al., 2023](https://arxiv.org/abs/2307.13768)
:::

::: {.column width="50%"}
Dedicated codes and algorithms:

- Angpow [Campagne et al., 2017](https://arxiv.org/abs/1701.03592)
- Matter [Schöneberg et al., 2018](https://arxiv.org/abs/1807.09540)
- FKEM [Fang et al., 2019](https://arxiv.org/abs/1911.11947)
- Levin [Reischke, 2025](https://arxiv.org/abs/2502.12142)
:::
::::

See LSST N5K challenge ([Leonard et al., 2022](https://arxiv.org/abs/2212.04291)) for an algorithm comparison

::: {.notes}
Go short. Just say there is a rich literature on this computation and a recent nice review from the LSST collaboration.
:::

## Why another algorithm then?

:::: {.columns}
<div class="column" style="width:40%; transform:translateY(+38%);line-height:1.1;">
  <p>There are a few aspects we wanted to improve</p>
  <ul>
    <li class="fragment" data-fragment-index="1" style="margin-bottom: 16px;">Speed</li>
    <li class="fragment" data-fragment-index="2" style="margin-bottom: 16px;">Accuracy</li>
    <li class="fragment" data-fragment-index="3">Differentiability</li>
  </ul>
</div>

::: {.column width="60%"}
::: {.r-stack}
::: {.fragment .fade-in-then-out fragment-index=1}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1747969161/N5k_timings_oo0my8.png){width="550" height="300"}

[Leonard et al., 2022](https://arxiv.org/abs/2212.04291)
:::
::: {.r-stack-item .fragment .fade-in-then-out data-fragment-index="2" }
\begin{equation}
P_{\operatorname{lin}}(k, z_1, z_2)\approx P_{\operatorname{lin}}(k, z=0)D(z_1)D(z_2)
\end{equation}
Some codes assume scale independent growth
:::

![](https://res.cloudinary.com/df9pocq2o/image/upload/v1747970922/Gradient-fx-and-the-Riemannian-gradient-R-fx-at-point-x-of-some-Riemannian-manifold_nj4abk.jpg){.fragment width="500" height="350" fragment-index=3 .fade-in-then-out}


:::{.r-stack-item .fragment fragment-index=4}
Addressing the previous points led the design of a new algorithm

- Massive usage of Linear Algebra
- Computation of inner $k$-integral with two Bessels
- Written in Julia (and jax version on its way!)
:::
:::
:::
::::

## Our computational work-horse: Chebyshev polynomials

:::: {.columns}
::: {.column width="50%"}
The :bulb: : expand the $P(k)$ on Chebyshev polynomial basis
\begin{equation}
P\left(k, \chi_1, \chi_2 ; \theta\right) \approx \sum_{n=0}^{N_{\max }} c_n\left(\chi_1, \chi_2 ; \theta\right) T_n(k)
\end{equation}

Decomposition is efficiently performed with an FFT

[Leverage the decomposition]{.fragment .fade-in fragment-index=1}

:::

::: {.column width="50%"}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748055576/Pk_cheb_rl8ps1.png)
:::
::::

\begin{align}
w_{\ell}\left(\chi_1, \chi_2; \theta\right)&=\int d k\, k^2 P(k, \chi_1, \chi_2; \theta ) j_{\ell}\left(k \chi_1\right) j_{\ell}\left(k \chi_2\right)\\
&\approx\sum_{n=0}^{N_{\max }} c_n\left(\chi_1, \chi_2; \theta\right) \int d k\, k^2 T_n(k) j_{\ell}\left(k \chi_1\right) j_{\ell}\left(k \chi_2\right) \equiv \sum_{n=0}^{N_{\max }} c_n\left(\chi_1, \chi_2; \theta\right) \tilde{T}_n(k)
\end{align}

::: {.absolute top="72%" left="12%" width="33px" .fragment .fade-in fragment-index=1}
:::  {.box style="--box-height: 19px;"}
:::
:::

::: {.absolute top="72%" left="40.5%" width="33px" .fragment .fade-in fragment-index=1}
:::  {.box style="--box-height: 19px;"}
:::
:::

::: {.absolute top="83.5%" left="34.9%" width="33px" .fragment .fade-in fragment-index=1}
:::  {.box style="--box-height: 19px;"}
:::
:::

::: {.absolute top="83.5%" left="91%" width="33px" .fragment .fade-in fragment-index=1}
:::  {.box style="--box-height: 19px;"}
:::
:::

::: {.notes}
Emphasize the decoupling of the cosmological dependent part and of the complex integrals
:::

## Our algorithm workflow

:::: {.columns}
The equations

::: {.column width="50%"}
<div style="font-size:0.85em;">
\begin{equation}
w_{\ell}\left(\chi_1, \chi_2; \theta\right) \approx \sum_{n=0}^{N_{\max }} c_n\left(\chi_1, \chi_2; \theta\right) \tilde{T}_n(k)
\end{equation}

\begin{align}
C_{i j}^{AB}(\ell)=\iint \mathrm{d} \chi_1 \mathrm{d} \chi_2  W_i^A\left(\chi_1\right) W_j^B\left(\chi_2\right)w_{\ell}\left(\chi_1, \chi_2\right)
\end{align}
</div>
:::

::: {.column width="50%" style="margin-top:-3.0em;"}
The code

```{.julia code-line-numbers="|2|3|4-5|" style="margin-top:2.2em;"}
#After computing spectra and windows
c = FFT_plan * Pk
w[i,j,k] = c[j,k,l] * T[i,j,k,l]
w_R = get_clencurt_weights_R_integration(2*nR+1)
Cℓ[l,i,j] = χ[n]*K[i,j,n,m]*w[l,n,m]*wχ[n]*wR[m]*Δχ
```
:::
::::

The workflow is:

- Compute the coefficients with an FFT
- Compute the $w_\ell(\chi_1, \chi_2)$'s with a tensor contraction
- Compute the $C_\ell$'s with a tensor contraction

## Blast.jl: timings
:::: {.columns}
::: {.column width="70%"}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748039281/blast_timings_qbujuu.png)
:::

<div class="column" style="width:30%; transform:translateY(+35%);line-height:1.1;">
  <p>Blast.jl is faster and has a better scaling^[All codes have been benchmarked on the same hardware, a node on the Narval cluster (Canada).] with the number of threads.</p>
  <p>P.S. New implementation of pylevin ([Reischke, 2025](https://arxiv.org/abs/2502.12142)) brings its runtime within a factor of 2 from FKEM</p>
</div>



::: {.column width="30%"}
:::
::::


## Blast.jl: timings breakdown

:::: {.columns}
::: {.column width="70%"}
::: {.r-stack}
::: {.fragment .fade-out fragment-index=1}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748039346/blast_timings_breakdown_vmdrmn.png)
:::

::: {.fragment .fade-in fragment-index=1}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748039781/number_bins_p6umdw.png)
:::
:::
:::

<div class="column" style="width:30%; transform:translateY(+62%);line-height:1.1;">
  <p>The main contributions do not depend on the number of bins!</p>
  <p class="fragment" data-fragment-index="1">Timings independent on the number of bins</p>
</div>


::::

::: {.absolute top="63.1%" left="10%" width="570px"}
:::  {.box style="--box-height: 19px;" .fragment .fade-in fragment-index=1}
:::
:::

::: {.absolute top="30.5%" left="52%" width="140px"}
:::  {.box style="--box-height: 60px;" .fragment .fade-out fragment-index=1}
:::
:::

## Extending Blast.jl

:::: {.columns}
::: {.column width="55%"}
Currently working on extending Blast.jl (in collaboration with S. Camera and G. Fabbian):

- Inclusion of RSD, IA, MB, and other relevant effects for $3\times2\,\mathrm{pt}$ analysis
- Inclusion of CMB Lensing and cross correlation
- Ongoing validation with CAMB (residuals within 0.2%) and pylevin (being performed right now)
- Inclusion of AD rules for efficient gradients
:::

::: {.column width="40%"}
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748303291/residuals_gg_hgpny2.png)


:::
::::

## Literature comparison

| Code                         | Hardware | Beyond Limber | Contributions | Gradient timing |
|------------------------------|----------|-----------------|---------------|---------------|
| jaxcosmo+Cosmopower-Jax^[Cosmopower-Jax is emulating the $P(k)$, while jaxcosmo is computing the $3\times2\,\mathrm{pt}$.], [Campagne et al., 2023](jjj), [Piras et al., 2025](kkk)      | A100 80 GB GPU   | No      | WL, IA, GC     | 15 s       |
| LimberJack.jl, [Ruiz-Zapatero et al., 2023](ddd)                     | 16 Core CPU   | No     | WL, IA, GC, MB, CMB L       | 0.075 s      |
| Blast.jl, [Chiarenza et al., 2025](ujn)                     | 16 Core CPU   | Yes       | WL, IA, GC, MB, RSD, CMB L       | 0.045 s    |

Blast.jl is the fastest and most complete of the differentiable $3\times2\,\mathrm{pt}$ public codes

## Summarizing

:::: {.columns}
::: {.column width="80%"}
What we have achieved so far:

- Developed a new Non Limber code for $3\times2\,\mathrm{pt}$ :white_check_mark:
- Validated within the N5K challenge :white_check_mark:
- Inclusion of additional effects and validation with external codes :hourglass_flowing_sand:
- AD compatibility :hourglass_flowing_sand:
- Compatibility with Mapse.jl for input Matter Power Spectrum :hourglass_flowing_sand:
- Jax translation and implementation within cloelib :hourglass_flowing_sand:
- Inclusion of the Bispectrum :hourglass_flowing_sand:
- Inclusion of $\Omega_K\neq0$ :hourglass_flowing_sand:
:::

::: {.column width="20%"}

![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748136237/383757137-dc268ab5-7ff8-40f1-bc37-9d3a1f356d99_roawqe.png)
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748142629/Julia_Programming_Language_Logo.svg_r4s4l4.png)

:::
::::

## Blast.jl: accuracy
![](https://res.cloudinary.com/df9pocq2o/image/upload/v1748039066/blast_accuracy_yjxtai.png)
